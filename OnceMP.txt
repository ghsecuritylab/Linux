1、权限，设置用户ID位， 设置组ID位
一个进程的权限，默认情况下是当前用户的权限，具体地说如下：
每个进程关联了6个以上的ID，这些ID会影响进程的权限等方面。
real user ID 、real group ID ： 这两个id标识了我们是谁，它们是在我们登录系统时从password文件中取出的，一般情况下，在一个登录会话中是不变的。
effective user ID、effective group ID 、supplementary group IDs： 用户访问文件的时候进行权限检查。
saved set-user-ID、saved set-group-ID ： saved by exec functions，是euid和egid的一份拷贝。
从上面可以看出进程的euid和egid可能跟用户id和用户组id不同:
1.1 一般情况下，启动一个进程，进程的euid和egid就是用户的uid和gid，所以进程权限就看用户身份。
1.2 某些情况下，进程权限可能跟用户权限不同。下面说明。
比如passwd命令让一个普通用户可以有权限更改自己的密码，尽管该用户没有/etc/passwd(或者/etc/shadow)的写权限。
passwd是怎么达到这样的目的呢？
原理如下：文件属性的st_mode字段中有两个标志位，且称为set-user-id，set-group-id。
如果程序文件的set-user-id标志位被设置有效，那么进程的有效用户id会被设置为该程序文件的所有者id，而不是启动这个进程的用户id。
set-group-id同理。

实际验证过程如下：
以root身份在当前用户主目录下创建了一个root目录和~/root/permission.txt文件，文件的属性如下：
-rw-r--r-- 1 root root 68 May 18 11:14 /home/marting/root/permission.txt
说明当前用户对此文件是没有写权限的。
另有一个程序sugid，会append某些字符串到一个文件中：
> ls -l ./sugid
-rwxr-xr-x 1 root    root  17800 May 18 13:57 sugid
换用普通用户身份执行命令：
> ./sugid  ~/root/permission.txt
ERROR: open /home/marting/root/permission.txt failed.
标识sugid进程根本没权限以写方式打开这个文件，尽管sugid的文件所有者是root（通过chown改的）。
用自己写的stat来查看sugid的属性：
> ./stat ./sugid
type: regular
set-user-id bit: -
set-group-id bit: -
permission: rwxr-xr-x （这个是sugid文件本身（被访问）的权限）
****(其他信息并未列出)
上面的信息标识sugid文件的设置用户id位和设置组id位均没有被设置。
> sudo chmod u+s sugid
> ls -l sugid
-rwsr-xr-x 1 root root 17800 May 18 13:57 sugid
通过chmod设置了sugid的设置用户id位以后，该文件的对应权限位已经变为"s"了。
接着执行命令查看sugid的属性：
> ./stat ./sugid
type: regular
set-user-id bit: set
set-group-id bit: -
permission: rwxr-xr-x
***
可见，sugid文件的设置用户ID为已经被设置了。
接着以普通用户身份执行命令：
> ./sugid  ~/root/permission.txt
没有任何错误输出，这个时候~/root/permission.txt文件已经被追加了一些内容。
可见，这个时候一个普通用户启动的进程，有了root的权限。

2、默认文件权限与umask
linux-3ffd:/home/*** # umask
0022
linux-3ffd:/home/*** # umask -S
u=rwx,g=rx,o=rx
umask以数字形式输出默认权限，而加-S参数后以rwx形式输出。
注意：umask的输出并不是默认权限值，而是默认要扣除的权限值。以上面的例子来说：
0022后三位数字022即为默认要扣除的权限值。首先记住：r=4,w=2,x=1。
上面三位数字022分别表示u，g，o三种用户的扣除权限值。那么就可以得出:
默认情况下：u拥有全部权限，g和o都扣除w权限。
同时：默认情况下，创建的目录对所有人都是一定有x权限的，而创建的文档对所有人一定是没有x权限的。
否则新创建的目录没有x权限，就不能作为工作目录，这不合理。而文档，一般是用于存储数据，是不需要x权限的。
结合上面umask值，就能得出umask -S的输出表示如下意义：
5.1 如果创建的是目录，默认权限是 u=rwx, g=r-x, o = r-x。
5.2 如果创建的是文件，默认权限是 u=rw-, g=r--, o = r--。

3、man section number.
The standard sections of the manual include:
0     Header files  
0p    Header files (POSIX)  
1     Executable programs or shell commands  
1p    Executable programs or shell commands (POSIX)  
2     System calls (functions provided by the kernel)  
3     Library calls (functions within program libraries)  
3n    Network Functions  
3p    Perl Modules  
4     Special files (usually found in /dev)  
5     File formats and conventions eg /etc/passwd  
6     Games  
7     Miscellaneous  (including  macro  packages and conventions), e.g. man(7), groff(7)  
8     System administration commands (usually only for root)  
9     Kernel routines  
l     Local documentation  
n     New manpages 

Distributions customize the manual section to their specifics,
which often include additional sections.

4、安装nginx
tar -xvf nginx-stable-1.14.tar.gz
cd nginx-stable-1.14
sudo ./auto/configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module 
如果没有安装nginx依赖的pcre，openssl等库，会提示先安装这些库，或者通过参数指定这些库的源码目录：
sudo ./auto/configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=../pcre-8.42 --with-openssl=../openssl-1.1.1-pre6 --with-zlib=../zlib-1.2.11
sudo make
sudo make install

5、sudo提示 command not found
一般用户通过sudo提升权限执行一个命令时，查找命令的PATH既不是该用户的PATH，也不是root用户的PATH，
而是一个sudoers' secure path。所以出现command  not found时，改这个path即可。
文件路径：/etc/sudoers
改如下这行，加上相应路径即可。
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

6. openSUSE安装gcc和make
   sudo zypper in gcc
   sudo zypper in gcc-c++
   sudo zypper in make

7、目录的权限
Linux目录和文件具有一样的权限分类：读、写、执行。
只是对于目录来说，权限对应的意义有些区别。比如，对于目录来说：
r : 读权限表示一个用户可以读取该目录的内容（子目录，文件等等）
x : 执行权限表示一个用户是否有权限把该目录作为工作目录，简单来说，就是能否通过cd进入该目录。
通过给某个用户的目录设置一个-wx的权限，会发现该用户有权限进入该目录（cd），确没权限查看该目录的内容（ls）。

8、查看文件的各种时间
ls -l 命令列出的是文件最后一次被修改时间（modification time）
ls命令还有一个参数time，可以设置为ctime（status time）或者atime（access time）： ls -l --time=ctime <file>
其中:
status time : 文件的权限或属性被更改的时间。
access time : 文件最后一次被访问的时间。

9、修改文件的时间
touch命令可以修改文件的mtime，ctime，atime。
touch <file> 可以把文件的三个时间属性都设置为当前时间。也可以通过参数设置某个时间属性为某个时间值。







