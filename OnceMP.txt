/*
1、这里可以看到各个版本内核代码，可以很方便地看到不同版本内核的同一代码文件，方便对比；并且还有访问函数定义和结构体定义的超链接：
https://elixir.bootlin.com/linux/v4.0.4/source/fs/stat.c

2、Linux下替代notepad++的编辑器：notepadqq。
设置Appearance中的Color scheme为liquibyte，编辑器看起来十分漂亮。

3、http://www.kohala.com/start/
这里有APUE和UNP的源码以及错误内容更正。
*/

1、权限，设置用户ID位， 设置组ID位
一个进程的权限，默认情况下是当前用户的权限，具体地说如下：
每个进程关联了6个以上的ID，这些ID会影响进程的权限等方面。
real user ID 、real group ID ： 这两个id标识了我们是谁，它们是在我们登录系统时从password文件中取出的，一般情况下，在一个登录会话中是不变的。
effective user ID、effective group ID 、supplementary group IDs： 用户访问文件的时候进行权限检查。
saved set-user-ID、saved set-group-ID ： saved by exec functions，是euid和egid的一份拷贝。
从上面可以看出进程的euid和egid可能跟用户id和用户组id不同:
1.1 一般情况下，启动一个进程，进程的euid和egid就是用户的uid和gid，所以进程权限就看用户身份。
1.2 某些情况下，进程权限可能跟用户权限不同。下面说明。
比如passwd命令让一个普通用户可以有权限更改自己的密码，尽管该用户没有/etc/passwd(或者/etc/shadow)的写权限。
passwd是怎么达到这样的目的呢？
原理如下：文件属性的st_mode字段中有两个标志位，且称为set-user-id，set-group-id。
如果程序文件的set-user-id标志位被设置有效，那么进程的有效用户id会被设置为该程序文件的所有者id，而不是启动这个进程的用户id。
set-group-id同理。

实际验证过程如下：
以root身份在当前用户主目录下创建了一个root目录和~/root/permission.txt文件，文件的属性如下：
-rw-r--r-- 1 root root 68 May 18 11:14 /home/marting/root/permission.txt
说明当前用户对此文件是没有写权限的。
另有一个程序sugid，会append某些字符串到一个文件中：
> ls -l ./sugid
-rwxr-xr-x 1 root    root  17800 May 18 13:57 sugid
换用普通用户身份执行命令：
> ./sugid  ~/root/permission.txt
ERROR: open /home/marting/root/permission.txt failed.
标识sugid进程根本没权限以写方式打开这个文件，尽管sugid的文件所有者是root（通过chown改的）。
用自己写的stat来查看sugid的属性：
> ./stat ./sugid
type: regular
set-user-id bit: -
set-group-id bit: -
permission: rwxr-xr-x （这个是sugid文件本身（被访问）的权限）
****(其他信息并未列出)
上面的信息标识sugid文件的设置用户id位和设置组id位均没有被设置。
> sudo chmod u+s sugid
> ls -l sugid
-rwsr-xr-x 1 root root 17800 May 18 13:57 sugid
通过chmod设置了sugid的设置用户id位以后，该文件的对应权限位已经变为"s"了。
接着执行命令查看sugid的属性：
> ./stat ./sugid
type: regular
set-user-id bit: set
set-group-id bit: -
permission: rwxr-xr-x
***
可见，sugid文件的设置用户ID为已经被设置了。
接着以普通用户身份执行命令：
> ./sugid  ~/root/permission.txt
没有任何错误输出，这个时候~/root/permission.txt文件已经被追加了一些内容。
可见，这个时候一个普通用户启动的进程，有了root的权限。

2、默认文件权限与umask
linux-3ffd:/home/*** # umask
0022
linux-3ffd:/home/*** # umask -S
u=rwx,g=rx,o=rx
umask以数字形式输出默认权限，而加-S参数后以rwx形式输出。
注意：umask的输出并不是默认权限值，而是默认要扣除的权限值。以上面的例子来说：
0022后三位数字022即为默认要扣除的权限值。首先记住：r=4,w=2,x=1。
上面三位数字022分别表示u，g，o三种用户的扣除权限值。那么就可以得出:
默认情况下：u拥有全部权限，g和o都扣除w权限。
同时：默认情况下，创建的目录对所有人都是一定有x权限的，而创建的文档对所有人一定是没有x权限的。
否则新创建的目录没有x权限，就不能作为工作目录，这不合理。而文档，一般是用于存储数据，是不需要x权限的。
结合上面umask值，就能得出umask -S的输出表示如下意义：
5.1 如果创建的是目录，默认权限是 u=rwx, g=r-x, o = r-x。
5.2 如果创建的是文件，默认权限是 u=rw-, g=r--, o = r--。

3、man section number.
The standard sections of the manual include:
0     Header files  
0p    Header files (POSIX)  
1     Executable programs or shell commands  
1p    Executable programs or shell commands (POSIX)  
2     System calls (functions provided by the kernel)  
3     Library calls (functions within program libraries)  
3n    Network Functions  
3p    Perl Modules  
4     Special files (usually found in /dev)  
5     File formats and conventions eg /etc/passwd  
6     Games  
7     Miscellaneous  (including  macro  packages and conventions), e.g. man(7), groff(7)  
8     System administration commands (usually only for root)  
9     Kernel routines  
l     Local documentation  
n     New manpages 

Distributions customize the manual section to their specifics,
which often include additional sections.

4、安装nginx
tar -xvf nginx-stable-1.14.tar.gz
cd nginx-stable-1.14
sudo ./auto/configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module 
如果没有安装nginx依赖的pcre，openssl等库，会提示先安装这些库，或者通过参数指定这些库的源码目录：
sudo ./auto/configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=../pcre-8.42 --with-openssl=../openssl-1.1.1-pre6 --with-zlib=../zlib-1.2.11
sudo make
sudo make install

5、sudo提示 command not found
一般用户通过sudo提升权限执行一个命令时，查找命令的PATH既不是该用户的PATH，也不是root用户的PATH，
而是一个sudoers' secure path。所以出现command  not found时，改这个path即可。
文件路径：/etc/sudoers
改如下这行，加上相应路径即可。
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

6. openSUSE安装gcc和make
   sudo zypper in gcc
   sudo zypper in gcc-c++
   sudo zypper in make

7、目录的权限
Linux目录和文件具有一样的权限分类：读、写、执行。
只是对于目录来说，权限对应的意义有些区别。比如，对于目录来说：
r : 读权限表示一个用户可以读取该目录的内容（子目录，文件等等）
x : 执行权限表示一个用户是否有权限把该目录作为工作目录，简单来说，就是能否通过cd进入该目录。
通过给某个用户的目录设置一个-wx的权限，会发现该用户有权限进入该目录（cd），确没权限查看该目录的内容（ls）。

8、查看文件的各种时间
ls -l 命令列出的是文件最后一次被修改时间（modification time）
ls命令还有一个参数time，可以设置为ctime（status time）或者atime（access time）： ls -l --time=ctime <file>
其中:
status time : 文件的权限或属性被更改的时间。
access time : 文件最后一次被访问的时间。

9、修改文件的时间
touch命令可以修改文件的mtime，ctime，atime。
touch <file> 可以把文件的三个时间属性都设置为当前时间。也可以通过参数设置某个时间属性为某个时间值。

10、grep
grep可以加一些参数，实现不同方式的匹配，包括正则。比如：
10.1 grep -n "key" sample.txt（-n会显示出行号）
10.2 grep -vn "key" sample.txt（-v, --invert-match : 反转匹配，就是返回不匹配的内容）
10.3 grep -in "key" sample.txt（-i, --ignore-case : 忽略大小写匹配）
还可以利用[]来匹配集合，比如：
10.4 grep -n "s[us]" sample.txt (匹配su ss)
集合还能反向匹配：
10.4 grep -n "s[^u]" sample.txt (匹配s*, 但是不匹配su)
^是对整个[]集合起作用的，比如：
10.5 grep -n "[^+ s]u" sample.txt (不匹配u前面有+或者空格或者s的行)
10.6 grep -n "[^a-z]u" sample.txt (不匹配u前面有小写字符的行)
grep还有一些特殊关键词，比如：
[:alnum:] 代表英文大小写字符及数字，亦卲 0-9, A-Z, a-z
[:alpha:] 代表任何英文大小写字符，亦卲 A-Z, a-z
[:blank:] 代表穸格键不 [Tab] 按键两者
[:cntrl:] 代表键盘上面癿控制按键，亦卲包括 CR, LF, Tab, Del.. 等等
[:digit:] 代表数字而已，亦卲 0-9
[:graph:] 除了穸格符 (穸格键不 [Tab] 按键) 外癿其他所有按键
[:lower:] 代表小写字符，亦卲 a-z
[:print:] 代表任何可以被打印出杢癿字符
[:punct:] 代表标点符号 (punctuation symbol)，亦卲： " ' ? ! ; : # $...
[:upper:] 代表大写字符，亦卲 A-Z
[:space:] 任何会产生穸白癿字符，包括穸格键, [Tab], CR 等等
[:xdigit:] 代表 16 迚位癿数字类垄，因此包括： 0-9, A-F, a-f 癿数字不字符
也就是说：
grep -n "[^[:lower:]]u" sample.txt (不匹配u前面有小写字符的行)
这个跟grep -n "[^a-z]u" sample.txt是一样的。
grep -n "[^+[:lower:]]u" sample.txt 就表示不匹配u前面有小写字符或者+符的行

10.7 ^还有和上面很接近确大不相同的意义：
grep -n "^s" sample.txt (这里匹配以字母s开头的行，这里没有[]了，因此^也不再表示反向匹配，而是行首的意思)
不过，这个意义的^依然可以跟集合一起合作：
grep -n "^[a-z]" sample.txt  (这里匹配以任意小写字母开头的行)
同样的，还有行尾的$字符：
grep -n "s$" sample.txt (匹配行尾以s结尾的行，Windows上的文本文件，结尾是有特殊字符的)
那么，结合行首和行尾字符，就可以查找空行：
grep -n '^$' sample.txt


11、awk文件处理
awk是一行一行地处理数据的，而处理行内的数据，又是以字段(用内建变量$0,$1,$2...引用，其中$0是特殊变量，表示一行数据)为单位的。
那么awk用什么分隔行内的字段呢，答案是用分隔符，这是一个awk内建的变量：FS。FS默认是空格，但是可以指定以其他字符为分隔符。
这里插入head和tail命令，这两个处理行数据也比较常用:
cat -n sample.txt | head -n 3000 | tail -n +1000
  1、cat filename 打印文件所有内容
  2、tail -n 1000 打印文件最后1000行的数据
  3、tail -n +1000 打印文件第1000行开始以后的内容
  4、head -n 1000 打印前1000的内容
也就是说，上面那条命令，最后结果就是：查看1000到3000行的数据。
其中cat的参数-n标识显示行号，和head、tail的参数-n不是一个意义。

awk命令的格式是：awk '条件1 {动作1} 条件2 {动作2} ...' filename
awk后面接两个单引号，中间加上大括号 {} 来设置想要对数据进行的处理动作：满足条件x的数据执行动作x。
比如来解析passwd文件，我想取出组id=100的所有用户信息，因为组id在passwd文件的第四列：
cat /etc/passwd | awk '{FS=":"} $4==100 {print $0}' (注意，awk的条件运算符跟C++类似)
这样就能取出来想要的数据。当然，也可以awk '{FS=":"} $4==100 {print $0}' /etc/passwd
到这里，可以利用上面的知识达到如下需求，比如说，我想列出当前源码目录，除了一个名为TCP的目录：
ls -l | grep "^d" | awk '$9 != "TCP" {print $9}'

12、用户管理useradd, passwd
先了解有几个相关的文档：
12.1 /etc/passwd : 这个文件现在有点歧义了，其实与用户密码倒是没什么关系，是管理uid和gid的。
                   这个文件每行的第二个字段历史上曾经会存储密码，但是现在密码已经放到/etc/shadow中了。
                   看一下文件属性:
                   -rw-r--r-- 1 root root   2378 Jun  2 15:25 /etc/passwd
                   -rw-r----- 1 root shadow 1200 Jun  2 15:25 /etc/shadow
                   就知道为什么密码不适合放在/etc/passwd中了。
12.2 /etc/shadow : 密码管理文件。
                   这个文件的每一行的第二个字段存储密码。但是新建立的用户（还没设置密码）处于锁定期间时，密码这一字段是一个"!"，表示用户是不能登录的。
                   这个文件的其他字段基本是表示密码有效期，过期时间，过期警告相关的信息。
12.3 /etc/group :  这个文件存储群组相关信息，比如: "users:x:100:"
                   其中表示群组名字，群组密码，群组id（gid），以及群组内用户（openSUSE似乎没有写群组密码和组内用户信息）。
这里关键还是passwd文件，其他相关数据都是根据passwd中的数据去查询相关数据的。比如说：
passwd中记录了用户名和uid和gid。系统可以根据uid去查shadow文件里面的用户密码，根据gid去查group文件中组信息。

接下来是用户管理：useradd和passwd。
useradd命令参数常用的有：
-u ：后面接癿是 UID ，是一组数字。直接挃定一个特定癿 UID 给这个账号
-g ：后面接的那个组名（或者gid）就是initial group（用户登录即拥有该组的权限），该群组的GID会被放置到/etc/passwd的第四个字段内。
-d ：指定某个目录成为HOME目录，而不用默认值。务必使用绝对路径。
-e ：后面接一个日期，格式为"YYYY-MM-DD", 此项目可写入/etc/shadow第八个字段， 即该账号失效日。
当然也可以完全用默认的参数值创建一个用户： useradd username。
但是就需要了解一下，默认情况下，用户会怎么创建了。useradd的默认参数值可以用useradd -D列出来。其实列出来的内容就是以下文档的内：

12.4 /etc/default/useradd : useradd命令默认参数值。
# useradd defaults file
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes
比如HOME指定了一个用户的HOME目录的父目录。GROUP指定了新创建用户的初始组ID。
除了上面这几个基本设置外，还有其他UID、GID以及密码参数等，也有默认参考值。就是以下文档的内容：

12.5 /etc/login.defs : 这个目录也有很多默认设置值，比如说，创建一个用户，是否默认添加HOME目录（/home/name）。这是该文档里面的CREATE_HOME的值决定的。
openSUSE系统默认情况下这个CREATE_HOME的值是no，因此新创建的用户默认情况下是不创建HOME目录的，但是该为yes以后，就会默认给新用户创建HOME目录。
改配置值，就用到了vi的搜索，在命令模式下，输入"/",然后输入关键词后ENTER，即可跳转到指定关键词位置。

12.6 useradd创建的用户是处于锁定期的，不能登录系统。从shadow文件中，可以看到该用户的密码字段是一个"!"号，也表示该用户还不能登录系统。
     这个时候需要用passwd命令给用户设置密码： passwd username
     passwd也有几个参数，可供设置密码失效日期等。

13、bash中的多任务
在bash中执行一条命令，其实就是创建一个子进程以完成某个任务。
bash中可以同时执行多个任务，只不过是只有一个是前景（foreground）任务，其他都是背景（background）任务。

13.1 将一个命令作为背景任务运行：只需要在命令最后加一个"&"。
不过这里会有一个问题，如果那条命令执行的时候会输出到stdout或stderr，那么bash交互环境还是会被干扰。
这个时候可以把命令的stdout，stderr都重定向到临时文件中：make > /tmp/make.log 2> /tmp/makeerr.log &

13.2 ctrl + z (其实是给进程发送了一个SIGSTOP信号)将当前执行的任务切换到背景，这个任务会进入Stopped状态。
比如，假设当前正在用vi编辑文件，按下ctrl + z：
[1]+  Stopped                 vi /etc/passwd
这个时候bash又可以进行别的任务，我来执行一个man，查看lstat的man page。没有退出man，直接再按下ctrl + z：
这个时候有两个背景任务了。输入jobs -l（-l会列出pid）查看背景任务：
[1]-  Stopped                 vi /etc/passwd
[2]+  Stopped                 man lstat
这个时候可以看到两个背景任务，并且都是Stopped状态，+表示最近一个背景任务，-表示次之，如果有三个以上任务，就只有最近的两个任务会有+或者-。

13.3 把背景任务切换到前景中： fg number。
fg命令可以把number序号对应的背景任务切换到前景中。

13.4 把背景任务切换到Running的状态： bg number。

14、#!/usr/bin/python3.4: No such file or directory
写python脚本，出现这个错误，实际上/usr/bin/python3.4是存在的！
其实出错原因是：第一行里面有些不可见字符，影响了shell对第一行的解析。
比如说这个文件可能是Windows系统产生的（比如用wine环境下的notepad++建立的文件，行尾结束符与linux不一样）。
或者，比如说我自己这里是用notepadqq建立的一个文件，在文件开头多了三个字节的数据（奇怪的是之后建立文件又没遇到这样的情况）。
可以用cat -A 或者od -c命令来查看文件，就能发现第一行确实多了一些不可见字符。
网上说用vi打开文件，并且命令行模式输入set ff=unix，然后wq保存即可。我这里试过后依然不行。
最后的解决办法：
用vi新建一个文件，写入第一行#!/usr/bin/python3.4。
剩下的脚本内容可用GUI编辑器复制过去，当然命令行也是可以的：
cat source.py | tail -n +2 >> dest.py
这条命令会把source.py第二行以后的内容复制并追加到dest.py文件。

15. sudo zypper in virtualbox
After installing virtualbox ,it cannot be started.
We should add the user to the group "vboxusers":
Yast->Security and Users ->User and Group Management : Edit our user config and check the "vboxusers" in "Additional Groups".

And then, VirtualBox can be started.But after creating a virtual machine, it cannot be started:
A msgbox with "Kernel driver not installed..." is poped.
Solution: (https://en.opensuse.org/VirtualBox)
> su root
> zypper in virtualbox-host-source kernel-devel
> systemctl stop vboxdrv
> vboxconfig
Actually, vboxconfig failed, but after i restart the host system, the virtual machine in VirtualBox can be started successfully.

16、开机信息dmesg
Linux dmesg命令用于显示开机信息。
kernel会将开机信息存储在ring buffer中。您若是开机时来不及查看信息，可利用dmesg来查看。
比如，在Ubuntu18.04 LTS版本中：
> dmesg | grep -i "eth"
[    3.050064] e1000 0000:02:01.0 eth0: (PCI:66MHz:32-bit) 00:0c:29:59:27:b1
[    3.050074] e1000 0000:02:01.0 eth0: Intel(R) PRO/1000 Network Connection
[    3.057410] e1000 0000:02:01.0 ens33: renamed from eth0
可以看到，系统启动时把eth0重命名为了ens33。
至于怎么重新改回eth0，参考https://www.itzgeek.com/how-tos/mini-howtos/change-default-network-name-ens33-to-old-eth0-on-ubuntu-16-04.html。

17、没有ifconfig（openSUSE）
系统没有ifconfig命令，网上说安装net-tools.x86_64即可，但是我系统提示已经安装，仍然不能用ifconfig。
输入cnf ifconfig，系统提示需要安装net-tools-deprecated，安装后即可执行命令ifconfig。

18、利用bc进行进制转换
bc除了支持交互模式，也支持处理文件。因此自然想到用管道。
把63转成二进制：
echo "obase=2;63" | bc
把63转成十六进制：
echo "obase=16;63" | bc

19、开启telnet服务
openSUSE默认只安装了telnet客户端，而没有安装服务端，因此我们要先安装telnet服务端。
另外，我们可以用xinetd超级守护进程来管理telnet服务。
sudo zypper in telnet-server
这个时候可以看到telnet服务程序已经安装：/usr/sbin/in.telnetd。
但是telnet服务没有启动：
> telnet 127.0.0.1
Trying 127.0.0.1...
telnet: connect to address 127.0.0.1: Connection refused
连不上telnet服务，再次查看端口确认：
netstat -tnl | grep 23
没有任何输出，表示确实没有telnet服务。

> sudo zypper in xinetd
> cd /etc/xinetd.d
> ls
chargen      daytime      discard      echo      servers   time-udp
chargen-udp  daytime-udp  discard-udp  echo-udp  services  time
进入xinetd配置目录查看，发现没有telnet。
那么自己新建一个：
>sudo vi telnet
输入如下内容：
#default: on
#description: telnet serves telnet sessions
service telnet
{
	flags = REUSE
	socket_type = stream //tcp
	wait = no //that is , more than one users can access at the same time
	user = root
	server = /usr/sbin/in.telnetd //the process, telnet server
	log_on_failure += USERID
	disable = no //enable telnet server
}
注意：写入telnet配置文件的时候，上面的注释是要去掉的。
接下来重提xinetd：
> sudo service xinetd restart
> netstat -tnl | grep 23
tcp6       0      0 :::23                   :::*                    LISTEN
可见，23端口已经有服务在监听了。
> telnet 127.0.0.1
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is '^]'.

Linux 4.12.14-lp150.11-default (192) (1)

192 login: 
至此，telnet服务已经启动了。




